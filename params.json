{"name":"sanpera","body":"# Introduction\r\n\r\nsanpera is an image-editing library for Python, powered by ImageMagick.\r\n\r\nWhile sanpera _uses_ ImageMagick, it isn't designed as an ImageMagick wrapper; the underlying library is a mere implementation detail.  The goal is to support all of ImageMagick's features with an idiomatic interface.\r\n\r\nThe examples from the ImageMagick Usage documentation are gradually being converted into unit tests in `sanpera/tests/im_usage`.  An easy way to learn sanpera, then, is to find an example that does what you want and read the test's equivalent Python code.\r\n\r\n# Warning\r\n\r\n**This software is not production-ready.**  It may segfault, leak memory, eat your data, cheat on your boyfriend, or burn down your house.\r\n\r\n# Concepts\r\n\r\n## Images and frames\r\n\r\nSomewhat unlike both PIL and ImageMagick, sanpera draws a distinction between an _image_ and a _frame_.  An image is a collection of metadata and zero or more frames; a frame contains the actual pixel data.\r\n\r\nFrames can be manipulated to alter an image in-place.  Image operations apply to every frame at once and produce copies.\r\n\r\n## Geometry\r\n\r\nSizes, offsets, and other geometric concepts are represented by small utility classes in `sanpera.geometry`.  To avoid the minor hassle of constructing a trivial object, methods that expect `Size` and `Vector` objects also accept `(x, y)` tuples.\r\n\r\n# Overview\r\n\r\n## Creating images\r\n\r\nA new image with one frame can be created with `Image.new()`.\r\n\r\n    from sanpera.image import Image\r\n    img = Image.new((640, 480))\r\n\r\nNote the double parentheses: that's a tuple (or a `Size`), not two separate arguments.\r\n\r\n## Reading and writing\r\n\r\nImages can be read and written by filename:\r\n\r\n    img = Image.read('foo.png')\r\n    img.write('bar.png')\r\n\r\nOr to and from bytestrings:\r\n\r\n    pngdata = img.to_buffer(format='png')\r\n    img = Image.from_buffer(pngdata)\r\n\r\nDue to limitations in ImageMagick, sanpera cannot read to or write from arbitrary file-like objects in chunks.\r\n\r\n## Working with frames\r\n\r\nAn image is an iterable of its frames.\r\n\r\n    frame = img[0]\r\n    print len(img)\r\n\r\nA frame may belong to only **one** image at a time.  You can still make copies, move frames from one image to another, or extract frames into a new image.\r\n\r\n## Resizing\r\n\r\nResizing creates a new image.\r\n\r\n    smaller = img.resized((100, 100))\r\n\r\n`Size` methods exist for adjusting sizes in various ways, including emulating any of the special symbols accepted by `convert -resize`.\r\n\r\n    thumbnail = img.resized(img.size.fit_inside((100, 100)))\r\n\r\n## Cropping\r\n\r\nTODO","tagline":"A better image library for Python","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}